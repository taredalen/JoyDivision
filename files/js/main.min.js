window.addEventListener("mousewheel", e => {
	if (e.deltaX === 0) {
		e.stopPropagation();
		e.preventDefault();
		window.scrollBy(e.deltaY, 0);
	}
});



var workData;
var WORK_ACTIVE = false;

$(document).ready(function() {
	resetAll();
	mobileSetup();
	loaderAnimation(() => {
		setTimeout(() => {
			loadPage();
		}, 1000);
	});
});

async function loadPage() {
	scrollHandler();
	await checkElement("._SS_wrapper");
	workData = await loadWorkData();
	await animatePageIn();
	navHandler();
	if (!isMobile()) {
		workListScroller();
		hoverTracker();
	}
	workClickListener();
}

function loaderAnimation(done) {
	// You gotta make it look like it's loading
	$("#content-container .load .loader").html("0%");
	setTimeout(() => {
		for(let i=0; i<19; i++) {
			setTimeout((index) => {
				$("#content-container .load .loader").html(index + "%");
			}, i*30, i);
		}
		setTimeout(() => {
			for(let i=17; i<65; i++) {
				setTimeout((index) => {
					$("#content-container .load .loader").html(index + "%");
				}, i*15, i);
			}
			setTimeout(() => {
				for(let i=66; i<=100; i++) {
					setTimeout((index) => {
						$("#content-container .load .loader").html(index + "%");
					}, i*15, i);
				}
				setTimeout(() => {
					done();
				}, 600)
			}, 1000)
		}, 1000);
	}, 1000);
}

function rafAsync() {
    return new Promise(resolve => {
        requestAnimationFrame(resolve);
    });
}

async function checkElement(selector) {
    let querySelector = null;
    while (querySelector === null) {
        await rafAsync();
        querySelector = document.querySelector(selector);
    }
    return querySelector;
}



/****************************************
 *
 * ASYNC DATA LOADERS AND ELEMENT STATE SETTERS
 *
 ****************************************/

function loadWorkData() {
	return new Promise((resolve, error) => {
		fetch("files/js/data.json")
			.then((data) => data.json())
			.then((data) => {
				for (i=0; i<4; i++) {
					$("#content-container .work-list ul").append(
						`<li class="list-item w-animate clickable passive" data-id="${data[i].id}">
							<img draggable="false" data-lazysrc="files/imgs/work-back/${data[i].id}/cover.jpg" alt="${data[i].title} Background Image">
							<p class="item-date w-animate">${data[i].date}</p>
							<div class="text-wrapper">
								<p class="item-summary w-animate">${data[i].summary}</p>
								<h1 class="item-title w-animate">${data[i].title}</h1>
							</div>
						</li>`);
				}
				for (i=4; i<6; i++) {
					$("#content-container .album-list ul").append(
						`<li class="list-item w-animate clickable passive" data-id="${data[i].id}">
							<img draggable="false" data-lazysrc="files/imgs/work-back/${data[i].id}/cover.jpg" alt="${data[i].title} Background Image">
							<p class="item-date w-animate">${data[i].date}</p>
							<div class="text-wrapper">
								<p class="item-summary w-animate">${data[i].summary}</p>
								<h1 class="item-title w-animate">${data[i].title}</h1>
							</div>
						</li>`);
				}
				$(".list-item, .w-animate, .a-animate").css("opacity", "0");
				$(".list-item, .w-animate, .a-animate").css("transform", "translateY(50%)");
				resolve(data);
		});
	});
}


function resetAll() {
	$("#content-container .parallax-wrapper.home-back").css("height", "0%");
	$("#content-container .title-wrapper *, .nav-wrapper").css("transform", "translateY(200%)");
	$("#content-container .parallax-wrapper.home-back img").css("transform", "scale(1.3)");
	$("#content-container .h-animate").css("transform", "translateY(100%)");
	$("#content-container .parallax-wrapper.home-back, #content-container .h-animate, #content-container .title-wrapper *, .nav-wrapper").css("opacity", "0");
	$("#content-container .load .loader").css("opacity", "0");
	$("#content-container .load .loader").css("transform", "translateY(50px)");
	$("#listing-container .details-wrapper *, #listing-container .primary-image-container").css("transform", "translateY(10vh)");
	$(".back-parallax-wrapper").css("opacity", "0");
	$("#listing-container .work-close-btn").css("display", "none");
	anime({
		targets: "#content-container .load .loader",
		opacity:1,
		translateY: "0",
		easing: "cubicBezier(0.23, 1, 0.32, 1)",
		duration: 1000,
		delay: 1000
	});
}


function animatePageIn() {
	return new Promise((resolve, error) => {

		let promiseArray = [];

		$('img[data-lazysrc]').each( function(i, e) {
			let promise = new Promise((resolve, error) => {
				this.src = $(this).data('lazysrc');
				this.onload = () => {
					resolve(i);
				}
			});
			promiseArray.push(promise);
		});

		Promise.all(promiseArray).then(() => {
			anime({
				targets: "#content-container .load .loader",
				opacity:0,
				translateY: "-50px",
				duration: 1000,
				delay: 1000,
				easing: "cubicBezier(0.755, 0.05, 0.855, 0.06)",
				complete: function() {
					$("#content-container .load").remove();

					anime({
						targets: ".nav-wrapper, .back-parallax-wrapper",
						translateY: "0%",
						opacity:1,
						easing: "cubicBezier(0.165, 0.84, 0.44, 1)",
						duration: 1500,
						delay: 150
					});
					anime({
						targets: "#content-container .parallax-wrapper.home-back",
						height: "100%",
						opacity:1,
						easing: "cubicBezier(0.165, 0.84, 0.44, 1)",
						duration: 1300,
						delay: 300
					});

					anime({
						targets: "#content-container .parallax-wrapper.home-back img",
						scale: "1",
						opacity:1,
						easing: "cubicBezier(0.165, 0.84, 0.44, 1)",
						duration: 1400,
						delay: 200
					});
					setTimeout(function() {
						anime({
							targets: "#content-container .h-animate",
							translateY: "0%",
							opacity:1,
							easing: "cubicBezier(0.165, 0.84, 0.44, 1)",
							duration: 1400,
							delay: anime.stagger(300),
							complete: function() {
								resolve();
							}
						});
					}, 600);
				}
			});
		});
	});
}




/****************************************
 *
 * MOBILE SUPPORT
 *
 ****************************************/


function isMobile() {
	return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
}

function mobileSetup() {
	if (isMobile()) {
		$(".wave-filter, #content-container.work-click-area ul").each(function() {
			$(this).addClass("disabled");
		});
		$("#content-container .text-content .scroll-msg.subheader").text("Swipe Up");
		$("#work-canvas").remove();
		$("#content-container.work-click-area").css("overflow-x", "auto");
		$("#content-container.work-click-area").css("overflow-y", "hidden");
		$("#content-container.work-click-area .hold-text").remove();
		$(".hover-container").remove();
	}
}


/****************************************
 *
 * NAVIGATION BUTTON AND SCROLL HANDLER
 *
 ****************************************/


function navHandler() {
	var locations = [
		{
			name: 'home',
			location: 0
		},
		{
			name: 'work',
			location: calcPosition("#content-container.work-click-area")
		},
		{
			name: 'music',
			location: calcPosition("#content-container.music")
		},
		{
			name: 'gallery',
			location: calcPosition("#content-container.gallery")
		},
		{	name: 'about',
			location: calcPosition("#content-container.about")
		}
	];
	$("body").data("position", locations[0].name);

	$(window).resize(() => {
		locations[1].location = calcPosition("#content-container.work-click-area")
		locations[2].location = calcPosition("#content-container.music")
		locations[3].location = calcPosition("#content-container.gallery")
		locations[4].location = calcPosition("#content-container.about")

	});

	let timeout;

	$('li.scroller span, .logo-icon').click((e) => {
		mobileNav(true);
		let parent = $(e.target).parent(".scroller").length;
		let dataName = parent ? $(e.target).parent().data("name") : $(e.target).data("name");
		let locationObj = locations.find(e => e['name'] === dataName);
		$("body").data("position", locationObj.name);
		document.querySelector(".document-ease").scrollTo({top: locationObj.location, behavior: 'smooth'});
	});

	$('.m-nav-wrapper li span').on('hover', function() {
		$(".m-nav-wrapper .background").addClass("transition");
		setTimeout(() => {
			let image = document.querySelector(".m-nav-wrapper .background");
			image.src = `files/imgs/back/nav-back-${$(this).parent().index()+1}.png`;
			image.onload = () => {
				$(".m-nav-wrapper .background").removeClass("transition");
			};
		}, 400);
	});

	document.addEventListener('wheel', (e) => {
		if (!WORK_ACTIVE) {
			e.preventDefault();
			if (!timeout) {
				let isDown = (e.deltaY < 0) ? true : false;
				scrollPage(isDown);

				timeout = setTimeout(() => {
					timeout = undefined;
				}, 1000)
			}
		}
	}, { passive: false });

	function scrollPage(isDown) {
		let dataName = $("body").data("position");
		let index = locations.findIndex(e => e['name'] === dataName);
		let newPosition;

		if (!isDown) {
			newPosition = ((index+1) == locations.length) ? false : locations[index+1];
		} else {
			newPosition = (index == 0) ? false : locations[index-1];
		}

		if (newPosition) $("body").data("position", newPosition.name);

		locations[1].location = calcPosition("#content-container.work-click-area");
		locations[2].location = calcPosition("#content-container.music");
		locations[3].location = calcPosition("#content-container.gallery");
		locations[4].location = calcPosition("#content-container.about");


		if (newPosition != false) document.querySelector(".document-ease").scrollTo(0, newPosition.location);
	}

	function calcPosition(e) {
		return document.querySelector(e).offsetTop;
	}

	// Mobile navigation handler

	$(".m-nav-wrapper ul li").css("opacity", "0");
	$(".m-nav-wrapper ul li").css("transform", "translateY(5vh)");

	$(".nav-wrapper .hb-button").click(function() {
		active = $(this).hasClass("close");
		mobileNav(active);
	});

	function mobileNav(close) {
		if (close) {
			anime({
				targets: ".m-nav-wrapper img.background",
				opacity: 0,
				easing: "cubicBezier(0.165, 0.84, 0.44, 1)",
				duration: 700,
				complete: () => {
					anime({
						targets: ".m-nav-wrapper ul li",
						opacity: 0,
						easing: "cubicBezier(0.165, 0.84, 0.44, 1)",
						duration: 800,
						complete: () => {
							$(".m-nav-wrapper ul li").css("transform", "translateY(5vh)");
							$(".m-nav-wrapper ul li").removeClass("visible");
						}
					});
					$(".nav-wrapper .hb-button").removeClass("close");
					$(".nav-wrapper .logo-icon").removeClass("invert");
					$(".m-nav-wrapper").removeClass("active");
				}
			});
		} else {
			$(".nav-wrapper .hb-button").addClass("close");
			$(".nav-wrapper .logo-icon").addClass("invert");
			$(".m-nav-wrapper").addClass("active");
			anime({
				targets: ".m-nav-wrapper ul li, .m-nav-wrapper img.background",
				opacity: 1,
				translateY: "0vh",
				easing: "cubicBezier(0.165, 0.84, 0.44, 1)",
				duration: 1000,
				delay: anime.stagger(200, {start: 500})
			});
			$(".m-nav-wrapper ul li").each((i, e) => {
				setTimeout(() => {
					$(e).addClass("visible");
				}, i*(150 + 300));
			});
		}
	}

	let yDown = null; let xDown = null; let checkHorizontal;

	document.addEventListener('touchstart', (e) => {
		yDown = e.touches[0].clientY;
		xDown = e.touches[0].clientX;
	}, false);

	document.addEventListener('touchmove', (e) => {
		if (!WORK_ACTIVE) {
			checkHorizontal = ($(e.target).parents(".work-list").length);
			if (!checkHorizontal) e.preventDefault();

			if (e.cancelable && !checkHorizontal) e.preventDefault();

			if (!yDown || !xDown) return;

			let yUp = e.touches[0].clientY;
			let xUp = e.touches[0].clientX;
			let yDiff = yDown - yUp;
			let xDiff = xDown - xUp;

			if ( Math.abs( xDiff ) <= Math.abs( yDiff ) ) {
				e.preventDefault();
				isDown = (yDiff > 0) ? false : true;
				scrollPage(isDown);
			} else {
				e.returnValue = true;
			}

			xDown = null;
			yDown = null;
		}
	}, { passive: false, cancelable: true });
}





/****************************************
 *
 * SLIDESHOW HANDLER
 * WORK LIST SLIDESHOW CLICK & DRAG HANDLER
 *
 ****************************************/

function workListScroller() {

	let isClick, endPosition, initialMousePosX, initialPos;
	let slider = $('#content-container .work-list');
	let maxSpeed = 5000;

	slider.css("transform", "translateX(0px)");
	calculateEndPos();

	$(document).mousedown((e) => {
		if (!isWork() || WORK_ACTIVE) return;
		initialMousePosX = e.clientX;
		isClick = true;
		setTimeout(() => {
			if (isClick) {
				slider.addClass("hold");
				$(".hover-container").addClass("scroll");
				initialPos = slider.css("transform").match(/-?[\d\.]+/g);
				initialPos = parseInt(initialPos[4]);
			}
		}, 150);
	});

	$(document).mouseleave(() => {
		isClick = false;
		$(".hover-container").removeClass("scroll");
		slider.removeClass("hold");
	});

	$(document).mouseup(() => {
		isClick = false;
		setTimeout(() => {
			$(".hover-container").removeClass("scroll");
			slider.removeClass("hold");
		}, 10);
	});

	$(document).mousemove((e) => {
		if (!isClick || !isWork() || WORK_ACTIVE) return;
		e.preventDefault();

		secondPosX = e.clientX;
		diff = secondPosX - initialMousePosX;
		calcPosition = initialPos - (maxSpeed * (diff / document.body.clientWidth));

		if (calcPosition > 0) calcPosition = 0;
		if (calcPosition <= (endPosition * -1)) calcPosition = endPosition*-1;

		slider.css("transform", `translateX(${calcPosition}px)`);
	});

	function isWork() {
		return ($("body").data("position") == "work");
	}

	$(window).resize(() => {
		calculateEndPos();
	});

	function calculateEndPos() {
		let perView, perEntireView;
		let listItems = slider.children("ul").children("li");
		let sliderWidth = 0;

		$("#content-container .work-list ul li").each(function() {
			sliderWidth += $(this).outerWidth();
			perView = Math.floor(slider.outerWidth()/$(this).outerWidth());
		});

		perEntireView = sliderWidth / listItems.length;
		endPosition = perEntireView * (listItems.length - perView);
	}
}






/****************************************
 *
 * WORK CANVAS
 * CANVAS MOUSE TRACKING, HOVERING, AND CLICKING
 *
 ****************************************/

function hoverTracker() {
	let hoverContainer = ".hover-container";
	let x = 0;
	let y = 0;

	$(document).mousemove(trackMouse);
	$(document).mouseup((e) => {setTimeout(() => {trackMouse(e)}, 50);});

	function trackMouse(e) {
		let t = 0;
		let active;

		if ($(".work-list").hasClass("hold")) return;

		clickableElement = isHoveringClickable(e);
		if (clickableElement) {
			$(hoverContainer).addClass("hover");
			$("body").css("cursor", "pointer");
			if (!$(clickableElement).hasClass("hover")) {
				$(clickableElement).addClass("hover").trigger("hover");
			}
			$(".hover:not(.hover-container)").each(function() {
				if (this != clickableElement) {
					$(this).removeClass("hover");
				}
			});
		} else {
			$("body").css("cursor", "default");
			$(".hover").each(function() {
				$(this).removeClass("hover");
			});
		}

		if ($(clickableElement).hasClass("passive") || !clickableElement) {
			active = {
				x: e.clientX,
				y: e.clientY
			}
		} else {
			active = {
				x: (clickableElement.getBoundingClientRect().left + ($(clickableElement).width() / 2)),
				y: (clickableElement.getBoundingClientRect().top + ($(clickableElement).height() / 2))
			},
			active = {
				x: active.x + ((active.x - e.clientX)*0.1),
				y: active.y + ((active.y - e.clientY)*0.1)
			}
		}

		function loop() {
			x += (easeInOutQuad(t) * ((active.x - x) - ($(hoverContainer).width() / 2)));
			y += (easeInOutQuad(t) * ((active.y - y) - ($(hoverContainer).height() / 2)));

			$(hoverContainer).css("left", x + "px");
			$(hoverContainer).css("top", y + "px");

			if (t < 1) {
				t += 0.04;
				requestAnimationFrame(loop);
			}
		}
		loop();

		if (!$(hoverContainer).hasClass("active")) {
			$(hoverContainer).css("left", (e.clientX - $(hoverContainer).width() / 2)+ "px");
			$(hoverContainer).css("top", (e.clientY - $(hoverContainer).height() / 2) + "px");
			$(hoverContainer).css("display", "block");
			setTimeout(() => {
				$(hoverContainer).addClass("active");
			}, 200);
		}
	}

	$(hoverContainer).click((e) => {
		clickableElement = isHoveringClickable(e);
		if (clickableElement) $(clickableElement).click();
	});

	function isHoveringClickable(e) {
		let isHover, hoverElem;

		$(".clickable").each(function (i) {
			let elemTop = $(this).offset().top;
			let elemBottom = elemTop + $(this).outerHeight();
			let elemLeft = $(this).offset().left;
			let elemRight = elemLeft + $(this).outerWidth();

			if (!isHover) {
				isHover = (((e.pageY <= elemBottom) && (e.pageY >= elemTop)) && ((e.pageX >= elemLeft) && (e.pageX <= elemRight)));
				hoverElem = this;
				if (hoverElem) {
					let x = hoverElem.getBoundingClientRect().left;
					let y = hoverElem.getBoundingClientRect().top;
					let topElt = document.elementFromPoint(x,y);
					if (topElt) {
						let overlay = hoverElem.contains(topElt) || topElt.isSameNode(document.querySelector(hoverContainer));

						if (!overlay) isHover = false;
					}


				}
			}
		});

		if (isHover) return hoverElem;
		return false;
	}

	function easeInOutQuad(t) {
		return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
	}
}




/****************************************
 *
 * Work Click Listeners & Handlers
 * REDUNDANT CODE, NEEDS TO BE REAUDITED
 *
 ****************************************/

var workScroll, allowAnimate;

function openItem(id) {
	$("#listing-container .f-date, #listing-container .f-title, #listing-container .f-description, #listing-container .links, #listing-container .f-index span, #listing-container .f-subtitle, #listing-container .f-s-description, #listing-container .roles").html("")
	$("#listing-container .scroll-wrapper").scrollTop(0);

	$("#listing-container .f-date").text(workData[id].date);
	$("#listing-container .f-title").text(workData[id].title);
	$("#listing-container .f-description").text(workData[id].details.description);
	$("#listing-container .f-index span").text("0" + workData[id].id);
	$("#listing-container .f-subtitle").text(workData[id].details.subtitle);
	$("#listing-container .f-s-description").text(workData[id].details.description2);
	document.querySelector("#listing-container .primary-image-container").src = 'files/imgs/work-back/'+workData[id].id+'/primary.png';
	document.querySelector("#listing-container .secondary-image-wrapper img").src = 'files/imgs/work-back/'+workData[id].id+'/secondary.png';

	for (i=0; i<workData[id].roles.length; i++) {
		$("#listing-container .roles").append(`<li>${workData[id].roles[i]}</li>`);
	}
	for (i=0; i<workData[id].links.length; i++) {
		$("#listing-container .links").append(`<a class="w-link clickable f-link" onclick="window.open('${workData[id].links[i].link}', '_blank')">${workData[id].links[i].text}</li>`);
	}

	WORK_ACTIVE = true;
	$(".nav-wrapper .hb-button, .nav-wrapper .logo-icon").addClass("invert");
	$("#listing-container .details-wrapper *, #listing-container .primary-image-container, #listing-container .stats-wrapper *, #listing-container .secondary-image-wrapper").css("transform", "translateY(10vh)");
	$("#listing-container .details-wrapper *, #listing-container .primary-image-container, #listing-container .stats-wrapper *, #listing-container .secondary-image-wrapper").css("opacity", "0");

	if (isMobile()) {
		detailsAnimate();
	} else {
		allowAnimate = false;
		workScroll = _SS.momentumScroll({
			root: "#listing-container .scroll-wrapper",
			duration: 1200,
			easing: "cubic-bezier(0.19, 1, 0.22, 1)",
			onScroll: () => {
				_SS.inView("#listing-container .stats-wrapper", {
					inView: () => {
						if (!allowAnimate) allowAnimate = true;
						if (WORK_ACTIVE && allowAnimate) detailsAnimate();
					}
				});
			}
		});
	}

	function detailsAnimate() {
		anime({
			targets: "#listing-container .secondary-image-wrapper",
			opacity: "1",
			translateY: "0vh",
			easing: "cubicBezier(0.25, 1, 0.5, 1)",
			duration: 1200
		});
		anime({
			targets: "#listing-container .scroll-section .details-wrapper *, #listing-container .stats-wrapper *",
			opacity: "1",
			translateY: "0vh",
			easing: "cubicBezier(0.25, 1, 0.5, 1)",
			duration: 1200,
			delay: anime.stagger(100),
			complete: () => {
				$("#listing-container .work-close-btn").css("display", "block");
				setTimeout(() => {
					$("#listing-container .work-close-btn").addClass("show");
				}, 100);
				allowAnimate = false;
			}
		});
	}

	anime({
		targets: ".document-ease",
		marginLeft: "10%",
		easing: "cubicBezier(0.86, 0, 0.07, 1)",
		duration: 1200
	});
	anime({
		targets: "#listing-container .content-wrapper",
		paddingLeft: "7vw",
		easing: "cubicBezier(0.23, 1, 0.32, 1)",
		duration: 1450
	});
	anime({
		targets: "#listing-container",
		width: "100vw",
		easing: "cubicBezier(0.86, 0, 0.07, 1)",
		duration: 1200,
		complete: () => {

			anime({
				targets: "#listing-container .primary-image-container",
				opacity: "1",
				translateY: "0vh",
				easing: "cubicBezier(0.25, 1, 0.5, 1)",
				duration: 1200,
				delay: 500
			});
			anime({
				targets: "#listing-container .entry-section .details-wrapper *",
				opacity: "1",
				translateY: "0vh",
				easing: "cubicBezier(0.25, 1, 0.5, 1)",
				duration: 1200,
				delay: anime.stagger(100),
				complete: () => {
					$("#listing-container .work-close-btn").css("display", "block");
					setTimeout(() => {
						$("#listing-container .work-close-btn").addClass("show");
						$("#listing-container ._SS_dummy").height($("#listing-container .content-container").outerHeight(true));
					}, 100);
				}
			});
		}
	});
}

function workClickListener() {

	$(".scroller, .logo-icon").click(function(e) {
		closeItem();
	});

	$(".work-close-btn").on("click", () => {
		closeItem();
	});

	$(".list-item").click(function(e) {
		openItem(parseInt($(this).data('id'))-1);
	});

	$(window).resize(() => {
		if ($("#listing-container ._SS_dummy").length) {
			$("#listing-container ._SS_dummy").height($("#listing-container .content-container").outerHeight(true));
		}
		if ($(".document-ease ._SS_dummy").length) {
			$(".document-ease ._SS_dummy").height($(".document-ease ._SS_wrapper")[0].scrollHeight);
		}
	});

	function closeItem() {
		if (!allowAnimate) {
			WORK_ACTIVE = false;
			$("#listing-container .work-close-btn").removeClass("show");
			anime({
				targets: "#listing-container .primary-image-container, #listing-container .secondary-image-wrapper",
				opacity: "0",
				easing: "cubicBezier(0.25, 1, 0.5, 1)",
				duration: 400
			});
			anime({
				targets: "#listing-container .details-wrapper *, #listing-container .stats-wrapper *",
				opacity: "0",
				easing: "cubicBezier(0.25, 1, 0.5, 1)",
				duration: 400,
				complete: () => {
					$("#listing-container .details-wrapper *, #listing-container .primary-image-container, #listing-container .stats-wrapper *, #listing-container .secondary-image-wrapper").css("transform", "translateY(10vh)");
					$("#listing-container .details-wrapper *, #listing-container .primary-image-container, #listing-container .stats-wrapper *, #listing-container .secondary-image-wrapper").css("opacity", "0");
					setTimeout(() => {
						$(".nav-wrapper .hb-button, .nav-wrapper .logo-icon").removeClass("invert");
					}, 400)
					anime({
						targets: ".document-ease",
						marginLeft: "0",
						easing: "cubicBezier(0.86, 0, 0.07, 1)",
						duration: 1300
					});
					anime({
						targets: "#listing-container .content-wrapper",
						paddingLeft: "0",
						easing: "cubicBezier(0.86, 0, 0.07, 1)",
						duration: 1300
					});
					anime({
						targets: "#listing-container",
						width: "0vw",
						easing: "cubicBezier(0.86, 0, 0.07, 1)",
						duration: 1200,
						complete: () => {
							$("#listing-container .work-close-btn").css("display", "none");
							if (workScroll) workScroll.destroy();
							$("#listing-container .scroll-wrapper").off('scroll');
						}
					});
				}
			});
		}
	}
}





/****************************************
 *
 * Scroll animation handlers
 *
 ****************************************/

function scrollHandler() {

	let animated = [];

	function animate(el, i) {
		if (!animated.includes(el)) {
			animated.push(el);
			anime({
				targets: el,
				opacity:1,
				translateY: "0",
				easing: "cubicBezier(0.165, 0.84, 0.44, 1)",
				duration: 1200,
				complete: function() {
					$(el).addClass("scroll-done");
				},
				delay: anime.stagger(200, {start: i*200})
			});
		}
	}

	_SS.momentumScroll({
		root: ".document-ease",
		duration: 1200,
		easing: "cubic-bezier(.47,.08,.24,.99)",
		offsets: [
			{element: ".parallax-wrapper, .list-item", speedY: 0.85},
			{element: ".back-parallax-wrapper", speedY: 0.7},
			{element: ".profile-image", speedY: 0.85}
		],
		onScroll: () => {
			if ($("body").data("position") == "work") {
				setTimeout(() => {
					$('.list-item').each(function (index) {
						anime({
							targets: ".list-item",
							opacity:1,
							translateY: "0",
							easing: "cubicBezier(0.165, 0.84, 0.44, 1)",
							duration: 1200,
							delay: anime.stagger(150, {start: 500})
						});

						setTimeout(() => {
							animate(".list-item:nth-child("+(index+1)+") .item-title.w-animate", index);
						}, 500);
						setTimeout(() => {
							animate(".list-item:nth-child("+(index+1)+") .item-summary.w-animate", index);
						}, 600);
						setTimeout(() => {
							animate(".list-item:nth-child("+(index+1)+") .item-date.w-animate", index);
						}, 700);
					});
				}, 200);
			}

			if ($("body").data("position") == "about") {
				setTimeout(() => {
					animate("#content-container.about .a-animate", 1);
					$("#content-container.about .background").css("opacity", "1");
				}, 500);
			}
		}
	});
}







// Mythium Archive: https://archive.org/details/mythium/
$(function()
{
    var playerTrack = $("#player-track"), bgArtwork = $('#bg-artwork'), bgArtworkUrl, albumName = $('#album-name'), trackName = $('#track-name'), albumArt = $('#album-art'), sArea = $('#s-area'), seekBar = $('#seek-bar'), trackTime = $('#track-time'), insTime = $('#ins-time'), sHover = $('#s-hover'), playPauseButton = $("#play-pause-button"),  i = playPauseButton.find('i'), tProgress = $('#current-time'), tTime = $('#track-length'), seekT, seekLoc, seekBarPos, cM, ctMinutes, ctSeconds, curMinutes, curSeconds, durMinutes, durSeconds, playProgress, bTime, nTime = 0, buffInterval = null, tFlag = false, albums = ['Dawn','Me & You','Electro Boy','Home','Proxy (Original Mix)'], trackNames = ['Skylike - Dawn','Alex Skrindo - Me & You','Kaaze - Electro Boy','Jordan Schor - Home','Martin Garrix - Proxy'], albumArtworks = ['_1','_2','_3','_4','_5'], trackUrl = ['https://raw.githubusercontent.com/himalayasingh/music-player-1/master/music/2.mp3','https://raw.githubusercontent.com/himalayasingh/music-player-1/master/music/1.mp3','https://raw.githubusercontent.com/himalayasingh/music-player-1/master/music/3.mp3','https://raw.githubusercontent.com/himalayasingh/music-player-1/master/music/4.mp3','https://raw.githubusercontent.com/himalayasingh/music-player-1/master/music/5.mp3'], playPreviousTrackButton = $('#play-previous'), playNextTrackButton = $('#play-next'), currIndex = -1;

    function playPause()
    {
        setTimeout(function()
        {
            if(audio.paused)
            {
                playerTrack.addClass('active');
                albumArt.addClass('active');
                checkBuffering();
                i.attr('class','fas fa-pause');
                audio.play();
            }
            else
            {
                playerTrack.removeClass('active');
                albumArt.removeClass('active');
                clearInterval(buffInterval);
                albumArt.removeClass('buffering');
                i.attr('class','fas fa-play');
                audio.pause();
            }
        },300);
    }


	function showHover(event)
	{
		seekBarPos = sArea.offset();
		seekT = event.clientX - seekBarPos.left;
		seekLoc = audio.duration * (seekT / sArea.outerWidth());

		sHover.width(seekT);

		cM = seekLoc / 60;

		ctMinutes = Math.floor(cM);
		ctSeconds = Math.floor(seekLoc - ctMinutes * 60);

		if( (ctMinutes < 0) || (ctSeconds < 0) )
			return;

        if( (ctMinutes < 0) || (ctSeconds < 0) )
			return;

		if(ctMinutes < 10)
			ctMinutes = '0'+ctMinutes;
		if(ctSeconds < 10)
			ctSeconds = '0'+ctSeconds;

        if( isNaN(ctMinutes) || isNaN(ctSeconds) )
            insTime.text('--:--');
        else
		    insTime.text(ctMinutes+':'+ctSeconds);

		insTime.css({'left':seekT,'margin-left':'-21px'}).fadeIn(0);

	}

    function hideHover()
	{
        sHover.width(0);
        insTime.text('00:00').css({'left':'0px','margin-left':'0px'}).fadeOut(0);
    }

    function playFromClickedPos()
    {
        audio.currentTime = seekLoc;
		seekBar.width(seekT);
		hideHover();
    }

    function updateCurrTime()
	{
        nTime = new Date();
        nTime = nTime.getTime();

        if( !tFlag )
        {
            tFlag = true;
            trackTime.addClass('active');
        }

		curMinutes = Math.floor(audio.currentTime / 60);
		curSeconds = Math.floor(audio.currentTime - curMinutes * 60);

		durMinutes = Math.floor(audio.duration / 60);
		durSeconds = Math.floor(audio.duration - durMinutes * 60);

		playProgress = (audio.currentTime / audio.duration) * 100;

		if(curMinutes < 10)
			curMinutes = '0'+curMinutes;
		if(curSeconds < 10)
			curSeconds = '0'+curSeconds;

		if(durMinutes < 10)
			durMinutes = '0'+durMinutes;
		if(durSeconds < 10)
			durSeconds = '0'+durSeconds;

        if( isNaN(curMinutes) || isNaN(curSeconds) )
            tProgress.text('00:00');
        else
		    tProgress.text(curMinutes+':'+curSeconds);

        if( isNaN(durMinutes) || isNaN(durSeconds) )
            tTime.text('00:00');
        else
		    tTime.text(durMinutes+':'+durSeconds);

        if( isNaN(curMinutes) || isNaN(curSeconds) || isNaN(durMinutes) || isNaN(durSeconds) )
            trackTime.removeClass('active');
        else
            trackTime.addClass('active');


		seekBar.width(playProgress+'%');

		if( playProgress == 100 )
		{
			i.attr('class','fa fa-play');
			seekBar.width(0);
            tProgress.text('00:00');
            albumArt.removeClass('buffering').removeClass('active');
            clearInterval(buffInterval);
		}
    }

    function checkBuffering()
    {
        clearInterval(buffInterval);
        buffInterval = setInterval(function()
        {
            if( (nTime == 0) || (bTime - nTime) > 1000  )
                albumArt.addClass('buffering');
            else
                albumArt.removeClass('buffering');

            bTime = new Date();
            bTime = bTime.getTime();

        },100);
    }

    function selectTrack(flag)
    {
        if( flag == 0 || flag == 1 )
            ++currIndex;
        else
            --currIndex;

        if( (currIndex > -1) && (currIndex < albumArtworks.length) )
        {
            if( flag == 0 )
                i.attr('class','fa fa-play');
            else
            {
                albumArt.removeClass('buffering');
                i.attr('class','fa fa-pause');
            }

            seekBar.width(0);
            trackTime.removeClass('active');
            tProgress.text('00:00');
            tTime.text('00:00');

            currAlbum = albums[currIndex];
            currTrackName = trackNames[currIndex];
            currArtwork = albumArtworks[currIndex];

            audio.src = trackUrl[currIndex];

            nTime = 0;
            bTime = new Date();
            bTime = bTime.getTime();

            if(flag != 0)
            {
                audio.play();
                playerTrack.addClass('active');
                albumArt.addClass('active');

                clearInterval(buffInterval);
                checkBuffering();
            }

            albumName.text(currAlbum);
            trackName.text(currTrackName);
            albumArt.find('img.active').removeClass('active');
            $('#'+currArtwork).addClass('active');

            bgArtworkUrl = $('#'+currArtwork).attr('src');

            bgArtwork.css({'background-image':'url('+bgArtworkUrl+')'});
        }
        else
        {
            if( flag == 0 || flag == 1 )
                --currIndex;
            else
                ++currIndex;
        }
    }

    function initPlayer()
	{
        audio = new Audio();

		selectTrack(0);

		audio.loop = false;

		playPauseButton.on('click',playPause);

		sArea.mousemove(function(event){ showHover(event); });

        sArea.mouseout(hideHover);

        sArea.on('click',playFromClickedPos);

        $(audio).on('timeupdate',updateCurrTime);

        playPreviousTrackButton.on('click',function(){ selectTrack(-1);} );
        playNextTrackButton.on('click',function(){ selectTrack(1);});
	}

	initPlayer();
});






// add elemnts
const bgBody = ["#e5e7e9", "#ff4545", "#f8ded3", "#ffc382", "#f5eda6", "#ffcbdc", "#dcf3f3"];
const body = document.body;
const player = document.querySelector(".player");
const playerHeader = player.querySelector(".player__header");
const playerControls = player.querySelector(".player__controls");
const playerPlayList = player.querySelectorAll(".player__song");
const playerSongs = player.querySelectorAll(".audio");
const playButton = player.querySelector(".play");
const nextButton = player.querySelector(".next");
const backButton = player.querySelector(".back");
const playlistButton = player.querySelector(".playlist");
const slider = player.querySelector(".slider");
const sliderContext = player.querySelector(".slider__context");
const sliderName = sliderContext.querySelector(".slider__name");
const sliderTitle = sliderContext.querySelector(".slider__title");
const sliderContent = slider.querySelector(".slider__content");
const sliderContentLength = playerPlayList.length - 1;
const sliderWidth = 100;
let left = 0;
let count = 0;
let song = playerSongs[count];
let isPlay = false;
const pauseIcon = playButton.querySelector("img[alt = 'pause-icon']");
const playIcon = playButton.querySelector("img[alt = 'play-icon']");
const progres = player.querySelector(".progres");
const progresFilled = progres.querySelector(".progres__filled");
let isMove = false;

// creat functions
function openPlayer() {

    playerHeader.classList.add("open-header");
    playerControls.classList.add("move");
    slider.classList.add("open-slider");

}

function closePlayer() {

    playerHeader.classList.remove("open-header");
    playerControls.classList.remove("move");
    slider.classList.remove("open-slider");

}

function next(index) {

    count = index || count;

    if (count == sliderContentLength) {
        count = count;
        return;
    }

    left = (count + 1) * sliderWidth;
    left = Math.min(left, (sliderContentLength) * sliderWidth);
    sliderContent.style.transform = `translate3d(-${left}%, 0, 0)`;
    count++;
    run();

}

function back(index) {

    count = index || count;

    if (count == 0) {
        count = count;
        return;
    }

    left = (count - 1) * sliderWidth;
    left = Math.max(0, left);
    sliderContent.style.transform = `translate3d(-${left}%, 0, 0)`;
    count--;
    run();

}

function changeSliderContext() {

    sliderContext.style.animationName = "opacity";

    sliderName.textContent = playerPlayList[count].querySelector(".player__title").textContent;
    sliderTitle.textContent = playerPlayList[count].querySelector(".player__song-name").textContent;

    if (sliderName.textContent.length > 16) {
        const textWrap = document.createElement("span");
        textWrap.className = "text-wrap";
        textWrap.innerHTML = sliderName.textContent + "   " + sliderName.textContent;
        sliderName.innerHTML = "";
        sliderName.append(textWrap);

    }

    if (sliderTitle.textContent.length >= 18) {
        const textWrap = document.createElement("span");
        textWrap.className = "text-wrap";
        textWrap.innerHTML = sliderTitle.textContent + "    " + sliderTitle.textContent;
        sliderTitle.innerHTML = "";
        sliderTitle.append(textWrap);
    }

}

function changeBgBody() {
    body.style.backgroundColor = bgBody[count];
}

function selectSong() {

    song = playerSongs[count];

    for (const item of playerSongs) {

        if (item != song) {
            item.pause();
            item.currentTime = 0;
        }

    }

    if (isPlay) song.play();


}

function run() {

    changeSliderContext();
    changeBgBody();
    selectSong();

}

function playSong() {

    if (song.paused) {
        song.play();
        playIcon.style.display = "none";
        pauseIcon.style.display = "block";

    }else{
        song.pause();
        isPlay = false;
        playIcon.style.display = "";
        pauseIcon.style.display = "";
    }


}

function progresUpdate() {

    const progresFilledWidth = (this.currentTime / this.duration) * 100 + "%";
    progresFilled.style.width = progresFilledWidth;

    if (isPlay && this.duration == this.currentTime) {
        next();
    }
    if (count == sliderContentLength && song.currentTime == song.duration) {
        playIcon.style.display = "block";
        pauseIcon.style.display = "";
        isPlay = false;
    }
}

function scurb(e) {

    // If we use e.offsetX, we have trouble setting the song time, when the mousemove is running
    const currentTime = ( (e.clientX - progres.getBoundingClientRect().left) / progres.offsetWidth ) * song.duration;
    song.currentTime = currentTime;

}

function durationSongs() {

    let min = parseInt(this.duration / 60);
    if (min < 10) min = "0" + min;

    let sec = parseInt(this.duration % 60);
    if (sec < 10) sec = "0" + sec;

    const playerSongTime = `${min}:${sec}`;
    this.closest(".player__song").querySelector(".player__song-time").append(playerSongTime);

}


changeSliderContext();

// add events
sliderContext.addEventListener("click", openPlayer);
sliderContext.addEventListener("animationend", () => sliderContext.style.animationName ='');
playlistButton.addEventListener("click", closePlayer);

nextButton.addEventListener("click", () => {
    next(0)
});

backButton.addEventListener("click", () => {
    back(0)
});

playButton.addEventListener("click", () => {
    isPlay = true;
    playSong();
});

playerSongs.forEach(song => {
    song.addEventListener("loadeddata" , durationSongs);
    song.addEventListener("timeupdate" , progresUpdate);

});

progres.addEventListener("pointerdown", (e) => {
    scurb(e);
    isMove = true;
});

document.addEventListener("pointermove", (e) => {
    if (isMove) {
        scurb(e);
        song.muted = true;
    }
});

document.addEventListener("pointerup", () => {
    isMove = false;
    song.muted = false;
});

playerPlayList.forEach((item, index) => {

    item.addEventListener("click", function() {

        if (index > count) {
            next(index - 1);
            return;
        }

        if (index < count) {
            back(index + 1);
            return;
        }

    });

});
